{"version":3,"sources":["components/UI/Button/Button.js","components/UI/Input/Input.js","data/formFields.js","validity/checkvalidity.js","container/ContactData/ContactData.js","data/bonusAssignmentdata.js","container/bonusAssignment/assignment.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","btnType","disabled","onClick","clicked","children","Input","inputElement","inputClasses","inValid","touched","push","elementtype","join","elementconfig","value","onChange","changed","onBlur","blur","multiple","options","map","optionElement","index","key","displayValue","radioButton","type","name","checkboxButton","style","display","label","sampleForm","elementType","elementConfig","placeholder","validation","required","valid","pattern","email","PhoneNumber","country","gender","card","city","location","addAddress","isChecked","show","currentAddress","row","column","ispermanentAddress","permanentAddress","checkValidity","rules","isValid","trim","minLength","length","maxLength","match","ContactData","state","inputChangedHandler","event","inputIdentifier","updatedForm","updatedElement","elements","tempForm","updateData","console","log","target","newLocation","setState","inputBlurHandler","formElementsArray","this","id","config","form","formElement","Component","bonusForm","worldRegions","countries","BonusAssignment","getCountriesHandler","fetch","method","then","res","json","data","updateCountries","newOptions","App","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d7bbc419.chunk.js","sourcesContent":["import React from 'react'\nimport './Button.css'\n\nconst Button = (props)=>{\n    return(\n        <button\n        className={\"Button \"+props.btnType}\n        disabled={props.disabled}\n        onClick = {props.clicked}>\n            {props.children}\n        </button>\n    )\n}\n\nexport default Button","import React,{Fragment} from 'react'\nimport './Input.css'\nimport Select from 'react-select'\n\n\nconst Input = (props)=>{\n    let inputElement = null\n    const inputClasses = ['InputElement']\n    if(props.inValid && props.touched ){\n        inputClasses.push('Invalid')\n    }\n    switch (props.elementtype) {\n        case ('input'):\n            inputElement = <input className={inputClasses.join(\" \")} \n            {...props.elementconfig} \n            value={props.value}\n            onChange={props.changed}\n            onBlur = {props.blur}/>\n            break\n        case ('textarea'):\n            inputElement = <textarea className={inputClasses.join(\" \")} \n            {...props.elementconfig} \n            value={props.value}\n            onChange={props.changed}\n            onBlur = {props.blur}/>\n            break\n        case ('select'):\n            inputElement = (<select \n            className={inputClasses.join(\" \")} value={props.value} onChange={props.changed} multiple={props.multiple} onBlur = {props.blur}>\n                <option value=\"\" disabled>Select an option</option>\n                {props.elementconfig.options.map((optionElement,index)=>{\n                    return(\n                    <option key= {index} value={optionElement.value}>\n                        {optionElement.displayValue}\n                    </option>\n                    )\n                })}\n            </select>)\n            break\n        case('radio'):\n            inputElement = (\n                <Fragment>\n                {props.elementconfig.options.map((radioButton,index)=>{\n                    return(\n                    <Fragment key={index}>\n                    <input type=\"radio\" value={radioButton.value} name={props.elementconfig.name} onBlur = {props.blur} onChange={props.changed}/>\n                    <label>{radioButton.displayValue}</label>\n                    </Fragment>\n                    )\n                })}\n                </Fragment>\n            )\n            break\n        case('checkbox'):\n            inputElement = (\n                <Fragment>\n                {props.elementconfig.options.map((checkboxButton,index)=>{\n                    return(\n                    <Fragment key={index}>\n                    <input type=\"checkbox\" value={checkboxButton.value} onBlur = {props.blur} onChange={props.changed}/>\n                    <label>{checkboxButton.displayValue}</label>\n                    </Fragment>\n                    )\n                })}\n                </Fragment>\n            )\n            break\n        case('SearchableSelect'):\n                inputElement=(\n                <Select \n                options={props.elementconfig.options} \n                onBlur = {props.blur} \n                onChange={props.changed} \n                className={props.elementconfig.className}/>)\n            break\n        default:\n            inputElement = <input className={inputClasses.join(\" \")} {...props.elementconfig} value={props.value}/>\n    }\n\n    return(\n        <div className='Input'style={{display:(props.display?\"none\":\"block\")}}>\n            <label className='Label'>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n}\n\nexport default Input","export const sampleForm={\n    name:{\n        label:'Name',\n        elementType:'input',\n        elementConfig:{\n            type:'text',\n            placeholder:'Your Name'\n        },\n        value:'',\n        validation:{\n            required:true,\n            valid:false,\n            pattern:'^[a-zA-Z ]*$'\n        }\n    },\n    email:{\n        label:'Email',\n        elementType:'input',\n        elementConfig:{\n            type:'email',\n            placeholder:'Your Email'\n        },\n        value:'',\n        validation:{\n            required:true,\n            valid:false,\n            pattern:\"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$\"\n        },\n        touched:false\n    },\n    PhoneNumber:{\n        label:'Phone Number',\n        elementType:'input',\n        elementConfig:{\n            type:'number',\n            placeholder:'Your Mobile Number'\n        },\n        value:'',\n        validation:{\n            required:true,\n            valid:false\n        },\n        touched:false\n    },\n    country:{\n        label:'Country',\n        elementType:'input',\n        elementConfig:{\n            type:'text',\n            placeholder:'Your Country'\n        },\n        value:'',\n        validation:{\n            required:true,\n            valid:false\n        },\n        touched:false\n    },\n    gender:{\n        label:'Gender',\n        elementType:'radio',\n        elementConfig:{\n            name:'gender',\n            options:[{value:'Male',displayValue:'Male'},\n            {value:'Female',displayValue:'Female'},\n            {value:'Other',displayValue:'Other'}]\n        },\n        value:'',\n        validation:{\n            required:true,\n            valid:false\n        }\n    },\n    card:{\n        label:'Select your accounts',\n        elementType:'checkbox',\n        elementConfig:{\n            type:'checkbox',\n            options:[{value:'Credit card',displayValue:'Credit card'},\n            {value:'Debit Card',displayValue:'Debit Card'},\n            {value:'Net banking',displayValue:'Net banking'}]\n        },\n        value:'',\n        validation:{\n            required:true,\n            valid:false\n        }\n    },\n    city:{\n        label:'Select City',\n        elementType:'select',\n        elementConfig:{\n            options:[\n            {value:'Panipat', displayValue:'Panipat'},\n            {value:'Karnal', displayValue:'Karnal'},\n            {value:'Sonipat', displayValue:'Sonipat'}]\n        },\n        value:'',\n        validation:{\n            required:true,\n            valid:true\n        }\n    },\n    location:{\n        label:'Select Loction',\n        elementType:'select',\n        elementConfig:{\n            options:[\n            {value:'Panipat', displayValue:'Panipat'},\n            {value:'Karnal', displayValue:'Karnal'},\n            {value:'Sonipat', displayValue:'Sonipat'}]\n        },\n        value:[],\n        validation:{\n            required:true,\n            valid:true\n        }\n    },\n    addAddress:{\n        elementType:'checkbox',\n        isChecked:false,\n        elementConfig:{\n            show:['currentAddress','permanentAddress','ispermanentAddress'],\n            options:[{value:'yes',displayValue:'Do you want to add address'}]\n        },\n        value:'',\n        validation:{\n            required:true,\n            valid:true\n        }\n    },\n    currentAddress:{\n        label:\"Current address\",\n        elementType:'textarea',\n        display:true,\n        elementConfig:{\n            row:\"4\",\n            column:\"50\",\n            placeholder:\"Enter address\"\n        },\n        value:\"\",\n        validation:{\n            required:true,\n            valid:true\n        }\n    },\n    ispermanentAddress:{\n        elementType:'checkbox',\n        display:true,\n        isChecked:true,\n        elementConfig:{\n            show:['permanentAddress'],\n            options:[{value:'yes',displayValue:'Is your current address same as permanent address'}]\n        },\n        value:'',\n        validation:{\n            required:true,\n            valid:true\n        }\n    },\n    permanentAddress:{\n        label:\"permanent address\",\n        elementType:'textarea',\n        display:true,\n        elementConfig:{\n            row:\"4\",\n            column:\"50\",\n            placeholder:\"Enter address\"\n        },\n        value:\"\",\n        validation:{\n            required:true,\n            valid:true\n        }\n    }\n\n}\n","const checkValidity = (value,rules)=>{\n    let isValid = true\n    if (rules.required){\n        isValid = value.trim() !== ''&& isValid\n    }\n    if(rules.minLength){\n        isValid = value.length>=rules.minLength && isValid\n    }\n    if(rules.maxLength){\n        isValid = value.length<= rules.maxLength && isValid\n    }\n    if(rules.pattern){\n        isValid = (value.match(rules.pattern) !== null)&&isValid\n    }\n    return isValid\n}\n\nexport default checkValidity","import React,{Component} from 'react'\nimport Button from '../../components/UI/Button/Button'\nimport './ContactData.css'\nimport Input from '../../components/UI/Input/Input'\nimport {sampleForm} from '../../data/formFields'\nimport checkValidity from '../../validity/checkvalidity'\n\nclass ContactData extends Component {\n    state = {\n        sampleForm:{...sampleForm}\n    }\n\n\n    inputChangedHandler = (event,inputIdentifier)=>{\n        const updatedForm = {...this.state.sampleForm}\n        const updatedElement = {...updatedForm[inputIdentifier]}\n        if (inputIdentifier===\"addAddress\" || inputIdentifier==='ispermanentAddress'){\n            for (const elements of updatedElement.elementConfig.show) {\n                const tempForm = {...this.state.sampleForm}\n                const updateData = {...tempForm[elements]}\n                updateData.display = updatedElement.isChecked\n                tempForm[elements] = updateData\n                updatedForm[elements] = updateData\n            }\n            updatedElement.isChecked = !updatedElement.isChecked\n        }\n        if (inputIdentifier ===\"location\"){\n            console.log(event.target.value)\n            const newLocation = [...updatedElement.value]\n            newLocation.push(event.target.value)\n            updatedElement.value = newLocation\n            console.log(updatedElement.value)\n        }\n        else{\n            console.log('Data')\n            updatedElement.value = event.target.value\n        }\n        updatedElement.validation.valid = checkValidity(event.target.value,updatedElement.validation)\n        updatedElement.touched = true\n        updatedForm[inputIdentifier] = updatedElement\n        this.setState({sampleForm:updatedForm})\n    }\n\n    inputBlurHandler = (event,inputIdentifier)=>{\n        console.log(this.state.sampleForm[inputIdentifier])\n        if (inputIdentifier==='location'){\n            console.log(this.state.sampleForm[inputIdentifier].value)\n        }\n        console.log(event.target.value)\n    }\n\n    render (){\n        const formElementsArray = []\n        for (const key in this.state.sampleForm) {\n            formElementsArray.push({\n                id:key,\n                config:this.state.sampleForm[key]\n            })\n        }\n        let form = (\n                <form>\n                    {formElementsArray.map(formElement=>{\n                        return(\n                            <Input key={formElement.id} elementtype={formElement.config.elementType} \n                            label ={formElement.config.label}\n                            elementconfig={formElement.config.elementConfig} \n                            value={formElement.config.value}\n                            inValid = {!formElement.config.validation.valid}\n                            touched = {formElement.config.touched}\n                            changed = {(event)=>this.inputChangedHandler(event,formElement.id)} \n                            blur = {(event)=>this.inputBlurHandler(event,formElement.id)}\n                            display={formElement.config.display}\n                            multiple= {formElement.config.multiple}\n                            />\n                        )\n                    })}\n                    <Button btnType={'Success'} >SUBMIT</Button>\n                </form>\n        )\n        return(\n            <div className=\"ContactData\">\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        )\n    }\n\n}\n\nexport default ContactData\n","export const bonusForm={\n    worldRegions:{\n        label:'World Regions',\n        elementType:'select',\n        elementConfig:{\n            placeholder:\"data\",\n            options:[{value:\"Select One\",displayValue:\"Select One\",disabled:\"disabled\"},\n            {value:'asia', displayValue:'Asia'},\n            {value:'africa', displayValue:'Africa'},\n            {value:'americas', displayValue:'Americas'},\n            {value:'europe', displayValue:'Europe'},\n            {value:'oceania', displayValue:'Oceania'}]\n        },\n        value:'',\n        validation:{\n            required:true,\n            valid:true\n        }\n    },\n    countries:{\n        label:'countries   ',\n        elementType:'SearchableSelect',\n        elementConfig:{\n            options:[{value:\"\",label:\"Select One\"}\n            ]\n        },\n        value:'',\n        validation:{\n            required:true,\n            valid:true\n        }\n    }\n\n}\n","import React,{Component} from 'react'\nimport Button from '../../components/UI/Button/Button'\nimport './assignment.css'\nimport Input from '../../components/UI/Input/Input'\nimport {bonusForm} from '../../data/bonusAssignmentdata'\nimport checkValidity from '../../validity/checkvalidity'\nclass BonusAssignment extends Component {\n    state = {\n        sampleForm:{...bonusForm}\n    }\n\n    getCountriesHandler = (value)=>{\n        fetch(`https://restcountries.eu/rest/v2/region/${value}`,{\n            method:\"GET\",\n        }).then(res=>res.json())\n        .then(data=>{\n            const countries = []\n            for (const iterator of data) {\n                const name = iterator.name\n                countries.push({value:name,label:name})\n            }\n            const updatedForm = {...this.state.sampleForm}\n            const updateCountries = {...updatedForm.countries}\n            const newOptions = [...countries]\n            updateCountries.elementConfig.options = newOptions\n            updatedForm.countries = updateCountries\n            this.setState({sampleForm:updatedForm})\n        })\n\n    }\n\n\n    inputChangedHandler = (event,inputIdentifier)=>{\n        console.log(event)\n        const updatedForm = {...this.state.sampleForm}\n        const updatedElement = {...updatedForm[inputIdentifier]}\n        if (inputIdentifier===\"worldRegions\"){\n            this.getCountriesHandler(event.target.value)\n        }\n        updatedElement.value = inputIdentifier===\"countries\"?event.value:event.target.value\n        updatedElement.validation.valid = checkValidity(inputIdentifier===\"countries\"?event.value:event.target.value,updatedElement.validation)\n        updatedElement.touched = true\n        updatedForm[inputIdentifier] = updatedElement\n        this.setState({sampleForm:updatedForm})\n    }\n\n    inputBlurHandler = (event)=>{\n        console.log(event)\n    }\n\n    render (){\n        const formElementsArray = []\n        for (const key in this.state.sampleForm) {\n            formElementsArray.push({\n                id:key,\n                config:this.state.sampleForm[key]\n            })\n        }\n        let form = (\n                <form>\n                    {formElementsArray.map(formElement=>{\n                        return(\n                            <Input key={formElement.id} elementtype={formElement.config.elementType} \n                            label ={formElement.config.label}\n                            elementconfig={formElement.config.elementConfig} \n                            value={formElement.config.value}\n                            inValid = {!formElement.config.validation.valid}\n                            touched = {formElement.config.touched}\n                            changed = {(event)=>this.inputChangedHandler(event,formElement.id)} \n                            blur = {(event)=>this.inputBlurHandler(event,formElement.id)}\n                            display={formElement.config.display}\n                            />\n                        )\n                    })}\n                    <Button btnType={'Success'} >SUBMIT</Button>\n                </form>\n        )\n        return(\n            <div className=\"BonusAssignment\">\n                <h4>Enter Data</h4>\n                {form}\n            </div>\n        )\n    }\n\n}\n\nexport default BonusAssignment\n","import React from 'react';\nimport ContactData from './container/ContactData/ContactData'\nimport Assignment from './container/bonusAssignment/assignment'\n\nfunction App() {\n  return (\n    <div>\n      <ContactData/>\n      <Assignment/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}